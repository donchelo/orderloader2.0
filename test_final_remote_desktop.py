#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test Final - Escritorio Remoto Corregido
"""

import sys
import time
import subprocess
import json

def test_corrected_remote_desktop_manager():
    """Prueba el RemoteDesktopManager corregido"""
    print("üîß Probando RemoteDesktopManager corregido...")
    
    try:
        from main import RemoteDesktopManager
        manager = RemoteDesktopManager()
        
        # Prueba 1: Buscar ventana
        print("\n1Ô∏è‚É£ Buscando ventana del escritorio remoto...")
        window_info = manager.find_remote_desktop_window()
        
        if window_info:
            print(f"‚úÖ Ventana encontrada: {window_info['MainWindowTitle']}")
            print(f"   Proceso: {window_info['ProcessName']}")
            print(f"   ID: {window_info['Id']}")
            
            # Prueba 2: Obtener ventana activa (m√©todo corregido)
            print("\n2Ô∏è‚É£ Obteniendo ventana activa (m√©todo corregido)...")
            active_title = manager.get_active_window_title()
            print(f"‚úÖ Ventana activa: {active_title}")
            
            # Prueba 3: Activar ventana
            print("\n3Ô∏è‚É£ Probando activaci√≥n corregida...")
            print("¬øDeseas probar la activaci√≥n? (s/n): ", end="")
            response = input().lower().strip()
            
            if response == 's':
                success = manager.activate_window_advanced(window_info)
                if success:
                    print("‚úÖ ¬°Activaci√≥n exitosa!")
                    
                    # Verificar que realmente est√° activa
                    time.sleep(1)
                    new_active_title = manager.get_active_window_title()
                    print(f"‚úÖ Ventana activa despu√©s: {new_active_title}")
                    
                    # Prueba 4: Maximizar ventana
                    print("\n4Ô∏è‚É£ Probando maximizaci√≥n...")
                    maximize_success = manager.maximize_window_advanced()
                    if maximize_success:
                        print("‚úÖ ¬°Maximizaci√≥n exitosa!")
                    else:
                        print("‚ö†Ô∏è Maximizaci√≥n fall√≥")
                        
                    return True
                else:
                    print("‚ùå Activaci√≥n fall√≥")
                    return False
            else:
                print("Prueba de activaci√≥n omitida")
                return True
        else:
            print("‚ùå No se encontr√≥ ventana del escritorio remoto")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en RemoteDesktopManager: {e}")
        return False

def test_sap_automation_complete():
    """Prueba la automatizaci√≥n completa de SAP"""
    print("\nüîß Probando automatizaci√≥n completa de SAP...")
    
    try:
        from main import SAPAutomation
        automation = SAPAutomation()
        
        # Verificar im√°genes de referencia
        print("\nüîç Verificando im√°genes de referencia...")
        missing_images = []
        for image in ["remote_desktop.png", "sap_desktop.png"]:
            if not (automation.reference_path / image).exists():
                missing_images.append(image)
        
        if missing_images:
            print(f"‚ùå Faltan im√°genes: {missing_images}")
            return False
        
        print("‚úÖ Todas las im√°genes de referencia est√°n disponibles")
        
        # Prueba de conexi√≥n al escritorio remoto
        print("\nüîç Prueba de conexi√≥n al escritorio remoto...")
        print("¬øDeseas ejecutar la prueba completa? (s/n): ", end="")
        response = input().lower().strip()
        
        if response == 's':
            success = automation.get_remote_desktop()
            if success:
                print("‚úÖ Conexi√≥n al escritorio remoto exitosa")
                
                # Prueba de verificaci√≥n visual
                print("\nüîç Prueba de verificaci√≥n visual...")
                visual_success = automation.verify_remote_desktop_visual()
                if visual_success:
                    print("‚úÖ Verificaci√≥n visual exitosa")
                else:
                    print("‚ö†Ô∏è Verificaci√≥n visual fall√≥")
                
                return True
            else:
                print("‚ùå Conexi√≥n al escritorio remoto fall√≥")
                return False
        else:
            print("Prueba completa omitida")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en automatizaci√≥n SAP: {e}")
        return False

def test_quick_activation():
    """Prueba r√°pida de activaci√≥n sin interacci√≥n"""
    print("\nüîß Prueba r√°pida de activaci√≥n...")
    
    try:
        # Buscar ventana del escritorio remoto
        result = subprocess.run(['powershell', '-Command', 
            'Get-Process | Where-Object {$_.ProcessName -eq "mstsc"} | Select-Object Id, MainWindowTitle | ConvertTo-Json'], 
            capture_output=True, text=True)
        
        if result.stdout and result.stdout.strip():
            windows = json.loads(result.stdout)
            if not isinstance(windows, list):
                windows = [windows]
            
            if windows:
                window = windows[0]
                process_id = window['Id']
                title = window['MainWindowTitle']
                
                print(f"‚úÖ Encontrada ventana: {title} (ID: {process_id})")
                
                # Script de activaci√≥n r√°pida
                activation_script = f'''
                Add-Type -TypeDefinition @"
                using System;
                using System.Runtime.InteropServices;
                public class Win32 {{
                    [DllImport("user32.dll")]
                    [return: MarshalAs(UnmanagedType.Bool)]
                    public static extern bool SetForegroundWindow(IntPtr hWnd);
                    
                    [DllImport("user32.dll")]
                    [return: MarshalAs(UnmanagedType.Bool)]
                    public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
                    
                    [DllImport("user32.dll")]
                    public static extern IntPtr GetForegroundWindow();
                    
                    [DllImport("user32.dll")]
                    public static extern int GetWindowThreadProcessId(IntPtr hWnd, out int lpdwProcessId);
                }}
"@
                
                $process = Get-Process -Id {process_id}
                if ($process) {{
                    $handle = $process.MainWindowHandle
                    if ($handle -ne [IntPtr]::Zero) {{
                        [Win32]::ShowWindow($handle, 9)
                        [Win32]::SetForegroundWindow($handle)
                        
                        Start-Sleep -Seconds 1
                        
                        $activeHwnd = [Win32]::GetForegroundWindow()
                        $activeProcessId = 0
                        [Win32]::GetWindowThreadProcessId($activeHwnd, [ref]$activeProcessId)
                        
                        if ($activeProcessId -eq {process_id}) {{
                            Write-Host "SUCCESS"
                        }} else {{
                            Write-Host "FAILED"
                        }}
                    }} else {{
                        Write-Host "ERROR"
                    }}
                }} else {{
                    Write-Host "ERROR"
                }}
                '''
                
                print("üîÑ Ejecutando activaci√≥n r√°pida...")
                result = subprocess.run(['powershell', '-Command', activation_script], 
                                      capture_output=True, text=True)
                
                if "SUCCESS" in result.stdout:
                    print("‚úÖ ¬°Activaci√≥n r√°pida exitosa!")
                    return True
                else:
                    print("‚ùå Activaci√≥n r√°pida fall√≥")
                    return False
            else:
                print("‚ùå No se encontraron ventanas mstsc")
                return False
        else:
            print("‚ùå No se pudieron obtener las ventanas")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en activaci√≥n r√°pida: {e}")
        return False

def main():
    """Funci√≥n principal de prueba final"""
    print("=" * 60)
    print("TEST FINAL - ESCRITORIO REMOTO CORREGIDO")
    print("=" * 60)
    
    print("\nEste test verificar√° que las correcciones implementadas funcionen:")
    print("1. RemoteDesktopManager corregido")
    print("2. Automatizaci√≥n completa de SAP")
    print("3. Activaci√≥n r√°pida")
    
    print("\nPresiona Enter para comenzar...")
    input()
    
    results = []
    
    # Prueba 1: RemoteDesktopManager corregido
    print("\n" + "="*40)
    print("PRUEBA 1: REMOTE DESKTOP MANAGER CORREGIDO")
    print("="*40)
    result1 = test_corrected_remote_desktop_manager()
    results.append(("RemoteDesktopManager Corregido", result1))
    
    # Prueba 2: Automatizaci√≥n completa
    print("\n" + "="*40)
    print("PRUEBA 2: AUTOMATIZACI√ìN COMPLETA")
    print("="*40)
    result2 = test_sap_automation_complete()
    results.append(("Automatizaci√≥n Completa", result2))
    
    # Prueba 3: Activaci√≥n r√°pida
    print("\n" + "="*40)
    print("PRUEBA 3: ACTIVACI√ìN R√ÅPIDA")
    print("="*40)
    result3 = test_quick_activation()
    results.append(("Activaci√≥n R√°pida", result3))
    
    # Resumen de resultados
    print("\n" + "="*60)
    print("RESUMEN DE RESULTADOS FINALES")
    print("="*60)
    
    for test_name, result in results:
        status = "‚úÖ EXITOSO" if result else "‚ùå FALL√ì"
        print(f"{test_name}: {status}")
    
    successful_tests = sum(1 for _, result in results if result)
    total_tests = len(results)
    
    print(f"\nTotal: {successful_tests}/{total_tests} pruebas exitosas")
    
    if successful_tests == total_tests:
        print("üéâ ¬°TODAS LAS PRUEBAS EXITOSAS! El sistema est√° funcionando correctamente.")
    elif successful_tests > 0:
        print("‚úÖ ¬°La mayor√≠a de las pruebas exitosas! El sistema funciona parcialmente.")
    else:
        print("‚ö†Ô∏è Ninguna prueba exitosa. Se necesita m√°s trabajo.")
    
    print("\nPresiona Enter para salir...")
    input()

if __name__ == "__main__":
    main()
