#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Automatizaci√≥n de SAP - OrderLoader 2.0
Clase principal para la automatizaci√≥n de procesos en SAP
"""

import time
import logging
from pathlib import Path

import pyautogui

from .remote_desktop_manager import RemoteDesktopManager
from .image_recognition import ImageRecognition
from .queue_manager import QueueManager
from ..config import (RECOGNITION_CONFIG, REQUIRED_IMAGES, KEYBOARD_SHORTCUTS, 
                     SECURITY_CONFIG, REMOTE_DESKTOP_CONFIG)

logger = logging.getLogger(__name__)

class SAPAutomation:
    """Clase principal para automatizaci√≥n de SAP"""
    
    def __init__(self, reference_path: Path = None):
        self.reference_path = reference_path or Path("assets/images")
        self.confidence = RECOGNITION_CONFIG['confidence']
        self.timeout = RECOGNITION_CONFIG['timeout']
        self.remote_manager = RemoteDesktopManager()
        self.image_recognition = ImageRecognition(self.reference_path)
        self.queue_manager = QueueManager()  # Nuevo: gestor de colas
        
        # Configurar pyautogui
        pyautogui.FAILSAFE = SECURITY_CONFIG['failsafe']
        pyautogui.PAUSE = SECURITY_CONFIG['pause_between_actions']
        
    def get_remote_desktop(self) -> bool:
        """
        M√©todo principal para obtener y activar el escritorio remoto (20.96.6.64)
        Implementa m√∫ltiples estrategias de recuperaci√≥n
        """
        logger.info("üöÄ Iniciando proceso de conexi√≥n al escritorio remoto (20.96.6.64)...")
        
        for attempt in range(self.remote_manager.max_attempts):
            logger.info(f"Intento {attempt + 1}/{self.remote_manager.max_attempts}")
            
            # Paso 1: Encontrar la ventana del escritorio remoto
            window_info = self.remote_manager.find_remote_desktop_window()
            if not window_info:
                logger.error(f"Intento {attempt + 1}: No se encontr√≥ ventana de escritorio remoto (20.96.6.64)")
                if attempt < self.remote_manager.max_attempts - 1:
                    logger.info(f"Esperando {self.remote_manager.retry_delay} segundos antes del siguiente intento...")
                    time.sleep(self.remote_manager.retry_delay)
                continue
            
            # Paso 2: Activar la ventana del escritorio remoto
            if not self.remote_manager.activate_window_advanced(window_info):
                logger.error(f"Intento {attempt + 1}: No se pudo activar la ventana del escritorio remoto")
                if attempt < self.remote_manager.max_attempts - 1:
                    logger.info(f"Esperando {self.remote_manager.retry_delay} segundos antes del siguiente intento...")
                    time.sleep(self.remote_manager.retry_delay)
                continue
            
            # Paso 3: Verificar que estamos en el escritorio remoto
            if self.verify_remote_desktop_visual():
                logger.info("‚úÖ Escritorio remoto (20.96.6.64) activado y verificado correctamente")
                return True
            else:
                logger.warning(f"Intento {attempt + 1}: Verificaci√≥n visual del escritorio remoto fall√≥")
                if attempt < self.remote_manager.max_attempts - 1:
                    logger.info(f"Esperando {self.remote_manager.retry_delay} segundos antes del siguiente intento...")
                    time.sleep(self.remote_manager.retry_delay)
        
        logger.error("‚ùå No se pudo conectar al escritorio remoto (20.96.6.64) despu√©s de todos los intentos")
        return False
    
    def verify_remote_desktop_visual(self) -> bool:
        """Verifica visualmente que estamos en el escritorio remoto usando t√©cnicas robustas"""
        logger.info("üîç Verificando escritorio remoto visualmente...")
        
        # Estrategia 1: Buscar imagen de referencia del escritorio remoto
        if self.image_recognition.wait_for_image("core/remote_desktop.png", 
                                               timeout=REMOTE_DESKTOP_CONFIG['visual_verification_timeout']):
            logger.info("‚úÖ Escritorio remoto verificado visualmente")
            return True
        
        # Estrategia 2: Usar b√∫squeda robusta con m√∫ltiples niveles de confianza
        if self.image_recognition.find_image_robust("core/remote_desktop.png", [0.8, 0.7, 0.6]):
            logger.info("‚úÖ Escritorio remoto detectado con b√∫squeda robusta")
            return True
        
        # Estrategia 3: Template matching m√°s preciso
        if self.image_recognition.find_image_with_template_matching("core/remote_desktop.png", threshold=0.7):
            logger.info("‚úÖ Escritorio remoto detectado con template matching")
            return True
        
        logger.warning("‚ö†Ô∏è No se pudo verificar visualmente el escritorio remoto")
        return False
    
    def verify_sap_desktop(self) -> bool:
        """Verifica que SAP Desktop est√° visible en el escritorio remoto usando estrategias avanzadas"""
        logger.info("üîç Verificando que SAP Desktop est√© visible en el escritorio remoto...")
        
        # Usar la verificaci√≥n avanzada con m√∫ltiples t√©cnicas
        if self.image_recognition.verify_sap_desktop_advanced():
            logger.info("‚úÖ SAP Desktop detectado correctamente - la aplicaci√≥n ya est√° abierta")
            return True
            
        logger.error("‚ùå SAP Desktop no est√° visible - verifica que la aplicaci√≥n est√© abierta en el escritorio remoto")
        return False
    
    def maximize_window(self) -> bool:
        """Maximiza la ventana actual usando Windows + Up"""
        logger.info("Maximizando ventana...")
        try:
            pyautogui.hotkey(*KEYBOARD_SHORTCUTS['maximize_window'])
            time.sleep(1)
            return True
        except Exception as e:
            logger.error(f"Error maximizando ventana: {e}")
            return False
    
    def open_modules_menu(self) -> bool:
        """Abre el men√∫ de m√≥dulos haciendo clic en el bot√≥n"""
        logger.info("üñ±Ô∏è Haciendo clic en bot√≥n de m√≥dulos...")
        try:
            if self.image_recognition.click_image("sap/sap_modulos_menu_button.png"):
                time.sleep(2)  # Esperar a que aparezca el men√∫
                logger.info("‚úÖ Clic en bot√≥n de m√≥dulos exitoso")
                
                # Verificar que el men√∫ se abri√≥
                if self.image_recognition.find_image_on_screen("sap/sap_modulos_menu.png"):
                    logger.info("‚úÖ Men√∫ de m√≥dulos detectado visualmente")
                    return True
                else:
                    logger.warning("‚ö†Ô∏è Men√∫ de m√≥dulos no detectado visualmente, pero continuando...")
                    return True  # Continuamos aunque no detectemos visualmente
            else:
                logger.error("‚ùå No se pudo hacer clic en el bot√≥n de m√≥dulos")
                return False
        except Exception as e:
            logger.error(f"‚ùå Error haciendo clic en bot√≥n de m√≥dulos: {e}")
            return False
    
    def navigate_to_sales(self) -> bool:
        """Navega a la secci√≥n de ventas haciendo clic en el bot√≥n de ventas"""
        logger.info("üñ±Ô∏è Haciendo clic en bot√≥n de ventas...")
        try:
            # Buscar el elemento de ventas en el men√∫
            ventas_elements = [
                "sap/sap_ventas_menu_button.png",
                "sap/sap_ventas_clientes_menu.png"
            ]
            
            ventas_clicked = False
            for element in ventas_elements:
                logger.info(f"üîç Buscando: {element}")
                if self.image_recognition.click_image(element):
                    logger.info(f"‚úÖ Clic exitoso en: {element}")
                    ventas_clicked = True
                    time.sleep(2)  # Esperar a que aparezca el men√∫ de ventas
                    break
            
            if not ventas_clicked:
                logger.warning("‚ö†Ô∏è No se pudo hacer clic en ventas, intentando atajo de teclado...")
                # Intentar usar atajo de teclado V como respaldo
                pyautogui.press(KEYBOARD_SHORTCUTS['navigate_sales'])
                time.sleep(2)
            
            # Verificar que estamos en el men√∫ de ventas
            ventas_menu_elements = [
                "sap/sap_ventas_order_menu.png",
                "sap/sap_ventas_clientes_menu.png"
            ]
            
            for element in ventas_menu_elements:
                if self.image_recognition.find_image_on_screen(element):
                    logger.info(f"‚úÖ Men√∫ de ventas detectado: {element}")
                    return True
            
            logger.warning("‚ö†Ô∏è Men√∫ de ventas no detectado visualmente, pero continuando...")
            return True  # Continuamos aunque no detectemos visualmente
            
        except Exception as e:
            logger.error(f"‚ùå Error navegando a ventas: {e}")
            return False
    
    def open_sales_order(self) -> bool:
        """Busca y hace clic en el bot√≥n de √≥rdenes de venta"""
        logger.info("üñ±Ô∏è Haciendo clic en √≥rdenes de venta...")
        try:
            if self.image_recognition.click_image("sap/sap_ventas_order_button.png"):
                time.sleep(3)  # Esperar a que se abra el formulario
                logger.info("‚úÖ Clic en √≥rdenes de venta exitoso")
                return True
            else:
                logger.warning("‚ö†Ô∏è No se pudo hacer clic en √≥rdenes de venta, buscando alternativas...")
                
                # Buscar otros elementos relacionados con √≥rdenes
                order_elements = [
                    "sap/sap_ventas_order_menu.png",
                    "sap/sap_ventas_clientes_menu.png"
                ]
                
                for element in order_elements:
                    if self.image_recognition.click_image(element):
                        logger.info(f"‚úÖ Clic alternativo exitoso en: {element}")
                        time.sleep(3)
                        return True
                
                logger.error("‚ùå No se pudo encontrar ning√∫n bot√≥n de √≥rdenes de venta")
                return False
        except Exception as e:
            logger.error(f"‚ùå Error haciendo clic en √≥rdenes de venta: {e}")
            return False
    
    def verify_sales_order_form(self) -> bool:
        """Verifica que estamos en el formulario de orden de venta"""
        logger.info("üîç Verificando formulario de orden de venta...")
        
        # Estrategia 1: Buscar el template principal
        if self.image_recognition.find_image_on_screen("sap/sap_orden_de_ventas_template.png"):
            logger.info("‚úÖ Formulario de orden de venta detectado")
            return True
        
        # Estrategia 2: Buscar elementos alternativos del formulario
        logger.info("üîç Buscando elementos alternativos del formulario...")
        form_elements = [
            "sap/sap_ventas_order_menu.png",
            "sap/sap_ventas_clientes_menu.png",
            "sap/sap_ventas_order_button.png"
        ]
        
        for element in form_elements:
            if self.image_recognition.find_image_on_screen(element):
                logger.info(f"‚úÖ Elemento de formulario detectado: {element}")
                return True
        
        # Estrategia 3: Usar b√∫squeda robusta
        logger.info("üîç Probando b√∫squeda robusta...")
        if self.image_recognition.find_image_robust("sap/sap_orden_de_ventas_template.png", [0.7, 0.6, 0.5]):
            logger.info("‚úÖ Formulario detectado con b√∫squeda robusta")
            return True
        
        logger.warning("‚ö†Ô∏è Formulario de orden de venta no detectado, pero continuando...")
        return True  # Continuamos aunque no detectemos el formulario espec√≠fico
    
    def verify_required_images(self) -> list:
        """
        Verifica que todas las im√°genes de referencia existen
        
        Returns:
            Lista de im√°genes faltantes
        """
        missing_images = []
        for image in REQUIRED_IMAGES:
            if not self.image_recognition.verify_image_exists(image):
                missing_images.append(image)
        return missing_images
    
    def run_automation(self) -> bool:
        """
        Ejecuta el proceso completo de automatizaci√≥n
        Workflow optimizado: Escritorio Remoto ‚Üí SAP Desktop (ya abierto) ‚Üí Clic M√≥dulos ‚Üí Clic Ventas ‚Üí Clic √ìrdenes
        """
        logger.info("üöÄ Iniciando automatizaci√≥n de SAP...")
        
        try:
            # Paso 1: Obtener y activar escritorio remoto (20.96.6.64)
            logger.info("üìç Paso 1: Activando escritorio remoto...")
            if not self.get_remote_desktop():
                logger.error("‚ùå No se pudo obtener el escritorio remoto")
                return False
            
            # Paso 2: Verificar que SAP Desktop ya est√° abierto (imagen de referencia)
            logger.info("üìç Paso 2: Verificando que SAP Desktop est√© visible...")
            if not self.verify_sap_desktop():
                logger.error("‚ùå SAP Desktop no est√° visible en el escritorio remoto")
                return False
            
            # Paso 3: Maximizar la ventana del escritorio remoto
            logger.info("üìç Paso 3: Maximizando ventana del escritorio remoto...")
            if not self.remote_manager.maximize_window_advanced():
                logger.warning("‚ö†Ô∏è No se pudo maximizar la ventana, pero continuando...")
            
            # Pausa para estabilizar
            logger.info("‚è≥ Esperando 3 segundos para estabilizar...")
            time.sleep(3)
            
            # Paso 4: Hacer clic en bot√≥n de m√≥dulos
            logger.info("üìç Paso 4: Haciendo clic en bot√≥n de m√≥dulos...")
            if not self.open_modules_menu():
                logger.error("‚ùå No se pudo abrir el men√∫ de m√≥dulos")
                return False
            
            # Paso 5: Hacer clic en ventas
            logger.info("üìç Paso 5: Haciendo clic en ventas...")
            if not self.navigate_to_sales():
                logger.error("‚ùå No se pudo navegar a ventas")
                return False
            
            # Paso 6: Hacer clic en √≥rdenes de venta
            logger.info("üìç Paso 6: Haciendo clic en √≥rdenes de venta...")
            if not self.open_sales_order():
                logger.error("‚ùå No se pudo abrir la orden de venta")
                return False
            
            # Paso 7: Verificar que el formulario est√© abierto
            logger.info("üìç Paso 7: Verificando formulario de orden de venta...")
            if not self.verify_sales_order_form():
                logger.error("‚ùå No se pudo verificar el formulario de orden de venta")
                return False
            
            logger.info("‚úÖ ¬°Automatizaci√≥n completada exitosamente!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error durante la automatizaci√≥n: {e}")
            return False

    def process_queue(self) -> bool:
        """
        Procesa todos los archivos en la cola de forma secuencial
        """
        logger.info("üöÄ Iniciando procesamiento de cola...")
        
        # Verificar si hay archivos pendientes
        if not self.queue_manager.has_pending_files():
            logger.info("üì≠ No hay archivos pendientes en la cola")
            return True
        
        # Mostrar estado inicial
        self.queue_manager.print_queue_status()
        
        # Procesar archivos uno por uno
        while self.queue_manager.has_pending_files():
            next_file = self.queue_manager.get_next_file()
            if not next_file:
                break
            
            logger.info(f"üîÑ Procesando archivo: {next_file.name}")
            
            try:
                # Procesar el archivo individual
                success = self.process_single_file(next_file)
                
                if success:
                    # Mover a completados
                    if self.queue_manager.move_to_completed(next_file):
                        logger.info(f"‚úÖ Archivo procesado exitosamente: {next_file.name}")
                    else:
                        logger.error(f"‚ùå Error al mover archivo completado: {next_file.name}")
                else:
                    logger.error(f"‚ùå Error al procesar archivo: {next_file.name}")
                    # Por ahora, dejamos el archivo en pending para revisi√≥n manual
                    # En el futuro podr√≠amos agregar una carpeta 'failed'
                
            except Exception as e:
                logger.error(f"‚ùå Excepci√≥n al procesar {next_file.name}: {e}")
                # El archivo permanece en pending para revisi√≥n manual
        
        # Mostrar estado final
        self.queue_manager.print_queue_status()
        logger.info("üèÅ Procesamiento de cola completado")
        return True
    
    def process_single_file(self, file_path: Path) -> bool:
        """
        Procesa un archivo individual (JSON con datos de orden de compra)
        Ejecuta la automatizaci√≥n completa de SAP para cada archivo
        """
        logger.info(f"üîÑ Iniciando procesamiento de: {file_path.name}")
        
        try:
            # Verificar que es un archivo JSON
            if not file_path.suffix.lower() == '.json':
                logger.warning(f"‚ö†Ô∏è Archivo {file_path.name} no es JSON, pero continuando...")
            
            # Ejecutar la automatizaci√≥n completa de SAP
            success = self.run_automation()
            
            if success:
                logger.info(f"‚úÖ Automatizaci√≥n completada para: {file_path.name}")
                logger.info(f"üìã Archivo JSON procesado: {file_path.name}")
                return True
            else:
                logger.error(f"‚ùå Automatizaci√≥n fall√≥ para: {file_path.name}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error en automatizaci√≥n para {file_path.name}: {e}")
            return False
